# graph.py

import dash
from dash import dcc, html
from dash.dependencies import Input, Output
import pandas as pd
import plotly.express as px
from sqlalchemy import create_engine, Column, String, Integer, Float, Text
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker
from dotenv import load_dotenv
import os
from PIL import Image, ImageFont, ImageDraw

def update_data():
    # Reopen the session to ensure new data is captured
    Session = sessionmaker(bind=engine)
    session = Session()

    # Get current data from the database and convert it to a DataFrame
    database = session.query(Earthquake).all()
    data = [item.__dict__ for item in database]
    
    # Remove the _sa_instance_state key generated by SQLAlchemy
    for item in data:
        item.pop('_sa_instance_state', None)
    
    db_df = pd.DataFrame(data)
    session.close()
    return db_df

Base = declarative_base()
class Earthquake(Base):
    __tablename__ = "earthquake"
    id = Column("id", Integer, primary_key=True, autoincrement="auto")
    title = Column("title", Text)
    description = Column("description", Text)
    pub_date = Column("publication_date", String(25))
    date = Column("date_time", String(50))
    scale = Column("scale", Float)
    location = Column("location", String(255))
    intensity = Column("intensity", String(255))
    latitude = Column("latitude", Float)
    longitude = Column('longitude', Float)

    def __init__(self, id, title, description, pub_date, date, scale, location, intensity, latitude, longitude):
        self.id = id
        self.title = title
        self.description = description
        self.pub_date = pub_date
        self.date = date
        self.scale = scale
        self.location = location
        self.intensity = intensity
        self.latitude = latitude
        self.longitude = longitude

    def __repr__(self):
        return f"({self.id}) ({self.title}) ({self.description}) ({self.pub_date}) ({self.date}) ({self.scale}) ({self.location}) ({self.intensity}) ({self.latitude}) ({self.longitude})"

# Title of APP
title = "AterraTreme Dashboard"

# Initialize the Dash application
app = dash.Dash(__name__)
app.title = title

# Load sensitive information
load_dotenv('.env')
host = os.getenv('host')
user = os.getenv('user')
password = os.getenv('password')
database = os.getenv('database')

# Establishes the connection to the server
engine = create_engine(f"mysql+pymysql://{user}:{password}@{host}/{database}?charset=utf8mb4")
Base = declarative_base()

# Add styles to the App
app.css.append_css({
    'external_url': './assets/style.css'
})


# Layout of the Dash app
app.layout = html.Div(
    className='div-principal',
    children=[
        html.Div(
            id='info-div',
            className='info-div',
            children=[
                html.H1(title),
                # Dropdown for title selection
                html.Div(
                    id='more-info-div',
                    children=[
                        dcc.Dropdown(
                            id='title-dropdown',
                            options=[],
                            value=None,  # Initial value
                            className='dropdown'
                        ),
                        html.Br(),
                        # Div to display description and publication date
                        html.Div(id='description-date', className='description'),
                        html.Br(),
                        dcc.Markdown(
                            className='more-info',
                            children=[
                                '''
                                #### Dados extraídos do [IPMA](https://www.ipma.pt)
                                '''
                            ]
                        ),
                        html.A(
                            href='https://www.ipma.pt/',
                            id='img-ipma',
                            className='img-ipma',
                            children=[
                                html.P(
                                    'Dados extraídos do'
                                ),
                                html.Img(
                                    alt='ipma-logo',
                                    src='https://www.ipma.pt/opencms/system/modules/ipma.website/resources/images/logo-ipma-17.svg',
                                ),
                            ]
                        )
                    ]
                ),
                dcc.Store(id='hide-store', data={'hide': False}),  # Store the hide state
            ]
        ),
        html.Div(
            id='map-container',
            className='div-mapa',
            children=[
                # Map to show the location of earthquakes
                dcc.Graph(id='map', className='mapa'),
            ]
        ),
        html.Div(
            className='mobile-info',
            children=[
                html.Button(
                    id='triguer',
                    className='mobile-triguer-info',
                    children=[
                        html.P(
                            "Informação do Sismo"
                        )
                    ]
                )
            ]
        ),
        # Interval to update the data
        dcc.Interval(
            id='interval-component',
            interval=60*3000,  # Update every minute
            n_intervals=0
        )
    ]
)


# Callback to update the dropdown options and the map
@app.callback(
    [Output('title-dropdown', 'options'),
     Output('title-dropdown', 'value'),
     Output('map', 'figure')],
    [Input('interval-component', 'n_intervals')]
)
def update_dropdown_and_map(n_intervals):
    df = update_data()
    dropdown_options = [{'label': date, 'value': date} for date in df['date']]
    if not df.empty:
        initial_value = df['date'].iloc[-1]
    else:
        initial_value = None

    custom_colors = [
        "#006400",  # Green
        "#00FF00",  # Lime
        "#ffbf00",  # Yellow
        "#ff4000",  # Orange
        "#ff0000",  # Red
    ]
    fig = px.scatter_mapbox(df,
                            lat='latitude',
                            lon='longitude',
                            hover_name='title',
                            hover_data=['intensity', 'location'],
                            color=df['scale'],
                            color_continuous_scale=custom_colors,
                            range_color=[1, 10],
                            size=df['scale'],
                            size_max=10,
                            zoom=4.4,
                            center=dict(lat=df['latitude'].iloc[-1], lon=df['longitude'].iloc[-1]))
    fig.update_layout(mapbox_style="open-street-map")
    fig.update_layout(margin={"r": 0, "t": 0, "l": 0, "b": 0})

    image = px.scatter_mapbox(df,
                            lat='latitude',
                            lon='longitude',
                            hover_name='title',
                            hover_data=['intensity', 'location'],
                            color=df['scale'],
                            color_continuous_scale=custom_colors,
                            range_color=[1, 10],
                            size=df['scale'] * 20,
                            zoom=12,
                            center=dict(lat=df['latitude'].iloc[-1], lon=df['longitude'].iloc[-1]))
    image.update_layout(mapbox_style="open-street-map")
    image.update_layout(margin={"r": 0, "t": 0, "l": 0, "b": 0})

    xy_1 = (455, 500)
    xy_2 = (535, 580)

    outline_color = 'red'
    outline_width = 5

    image.write_image("assets/MAPA_SISMO.png", width=1080, height=1080)
    img = Image.open("assets/MAPA_SISMO.png")
    draw = ImageDraw.Draw(img)
    draw.line([xy_1[0], xy_1[1], xy_2[0], xy_1[1]], fill=outline_color, width=outline_width)  # Superior
    draw.line([xy_2[0], xy_1[1], xy_2[0], xy_2[1]], fill=outline_color, width=outline_width)  # Direito
    draw.line([xy_2[0], xy_2[1], xy_1[0], xy_2[1]], fill=outline_color, width=outline_width)  # Inferior
    draw.line([xy_1[0], xy_2[1], xy_1[0], xy_1[1]], fill=outline_color, width=outline_width)  # Esquerdo
    img.save("assets/MAPA_SISMO.png")

    return dropdown_options, initial_value, fig

# Callback to update description and publication date
@app.callback(
    Output('description-date', 'children'),
    [Input('title-dropdown', 'value')]
)
def update_description_data(selected_date):
    df = update_data()
    row = df[df['date'] == selected_date]
    if not row.empty:
        description = html.Table(
            style={"text-align": "left", "font-size":"15px"},
            children=[
                html.Tr([html.Th("Hora: "), html.Td(row['date'])]),
                html.Tr([html.Th("Epicentro: "), html.Td(row['location'])]),
                html.Tr([html.Th("Intensidade (MMI): "), html.Td(row['intensity'])]),
                html.Tr([html.Th("Magnitude: "), html.Td(row['scale'])])
            ])
        return description
    else:
        return html.Div("No data available")

@app.callback(
    Output('more-info-div', 'className'),
    Input('hide-store', 'data')
)
def update_styles(data):
    hide = data['hide']
    if hide:
        return 'more-info-div hidden'
    else:
        return 'more-info-div visible'

@app.callback(
    Output('hide-store', 'data'),
    Input('triguer', 'n_clicks'),
    prevent_initial_call=True
)
def toggle_hide(n_clicks):
    if n_clicks is None:
        raise dash.exceptions.PreventUpdate
    return {'hide': n_clicks % 2 == 1}

if __name__ == '__main__':
    app.run_server(host='0.0.0.0', port=8050, debug=False)
    
