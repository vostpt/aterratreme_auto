# create_image.py

from PIL import Image, ImageFont, ImageDraw
import pandas as pd
from sqlalchemy import create_engine, Column, String, Integer, Float, Text
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker
from dotenv import load_dotenv
import os

def overlay_text(img, text, position, font, color):
    """
    Overlays the given text on the provided image at the specified position.
    """
    draw = ImageDraw.Draw(img)
    draw.text(position, text, font=font, fill=color)


def update_data():
    # Reopen the session to ensure new data is captured
    Session = sessionmaker(bind=engine)
    session = Session()

    # Get current data from the database and convert it to a DataFrame
    database = session.query(Earthquake).all()
    data = [item.__dict__ for item in database]
    
    # Remove the _sa_instance_state key generated by SQLAlchemy
    for item in data:
        item.pop('_sa_instance_state', None)
    
    db_df = pd.DataFrame(data)
    session.close()
    return db_df

if __name__ == "__main__":
    # Load sensitive information
    load_dotenv('.env')
    host = os.getenv('host')
    user = os.getenv('user')
    password = os.getenv('password')
    database = os.getenv('database')

    Base = declarative_base()
    class Earthquake(Base):
        __tablename__ = "earthquake"
        id = Column("id", Integer, primary_key=True, autoincrement="auto")
        title = Column("title", Text)
        description = Column("description", Text)
        pub_date = Column("publication_date", String(25))
        date = Column("date_time", String(50))
        scale = Column("scale", Float)
        location = Column("location", String(255))
        intensity = Column("intensity", String(255))
        latitude = Column("latitude", Float)
        longitude = Column('longitude', Float)

        def __init__(self, id, title, description, pub_date, date, scale, location, intensity, latitude, longitude):
            self.id = id
            self.title = title
            self.description = description
            self.pub_date = pub_date
            self.date = date
            self.scale = scale
            self.location = location
            self.intensity = intensity
            self.latitude = latitude
            self.longitude = longitude

        def __repr__(self):
            return f"({self.id}) ({self.title}) ({self.description}) ({self.pub_date}) ({self.date}) ({self.scale}) ({self.location}) ({self.intensity}) ({self.latitude}) ({self.longitude})"


    # Establishes the connection to the server
    engine = create_engine(f"mysql+pymysql://{user}:{password}@{host}/{database}?charset=utf8mb4")
    Base = declarative_base()


    latest_data = update_data().iloc[0]

    # Load the image template
    img_path = "assets/SISMO_TEMPLATE_AUTO.png"
    img = Image.open(img_path)

    # Define the font for the overlay text
    font = ImageFont.truetype("assets/Lato-Bold.ttf", 38)

    # Overlay the location information on the image
    location_text = str(latest_data['location'][0]).upper() + str(latest_data['location'][1:])
    overlay_text(img, location_text, (390, 559), font, "#703D25")

    # Overlay the scale information on the image
    scale_text = str(latest_data['scale'])
    overlay_text(img, scale_text, (455, 629), font, "#703D25")

    # Overlay the date_time information on the image
    date_time_text = latest_data['pub_date']
    overlay_text(img, date_time_text, (242, 772), font, "#00A396")

    # Overlay the intensity information on the image
    intensity_text = latest_data['intensity']
    overlay_text(img, intensity_text, (520, 832), font, "#703D25")

    # Save the modified image
    img.save("assets/SISMO_TEMPLATE_MODIFIED.png")
